from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, ImageMessage, TextSendMessage
from paddleocr import PaddleOCR
import cv2
import re
import os
import tempfile

app = Flask(__name__)

# LINE Bot 憑證（稍後從環境變數獲取）
LINE_CHANNEL_ACCESS_TOKEN = os.getenv('LINE_CHANNEL_ACCESS_TOKEN', '你的 Channel Access Token')
LINE_CHANNEL_SECRET = os.getenv('LINE_CHANNEL_SECRET', '你的 Channel Secret')

# 初始化 LINE Bot
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# 初始化 PaddleOCR
ocr = PaddleOCR(use_angle_cls=True, lang='chinese_cht', use_gpu=False)  # Vercel 不支援 GPU

def preprocess_image(image_path):
    """預處理圖片以提高OCR識別準確率"""
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
    denoised = cv2.fastNlMeansDenoising(binary, h=10)
    return denoised

def filter_non_ingredients(texts):
    """過濾掉非成分信息"""
    exclude_keywords = [
        "有效日期", "保存期限", "進口商", "消費者", "地址", "制造商", "原產地", "保存方法",
        "產品圖示", "開封后", "本產品含有", "效日期", "重", "生產地", "Made in", "Taiwan",
        "包裝", "製造商", "日期", "條碼", "規格", "產品名稱", "成分含量", "標示", "遥敏原",
        "高温", "变形", "油质", "颜色", "影响风味", "可食用", "容量"
    ]
    valid_ingredients = []
    for text in texts:
        if any(keyword in text for keyword in exclude_keywords):
            break
        if len(text) >= 2:
            valid_ingredients.append(text)
    return valid_ingredients

def extract_ingredients_enhanced(image_path, lang='chinese_cht'):
    """增強版成分提取函數"""
    processed_img = preprocess_image(image_path)
    result = ocr.ocr(processed_img, cls=True)
    
    all_text = [word_info[1][0] for line in result for word_info in line]
    filtered = filter_non_ingredients(all_text)
    full_text = ' '.join(filtered)
    
    ch_keywords = ['配料', '成分', '配料表', '原料', '原材料', '食品配料', '食品成分', '配料清單', '成份', '配方', '食物成分', '食材', '用料']
    keyword_pattern = '|'.join(ch_keywords)
    pattern = rf'(?:{keyword_pattern})[：:]\s*([^。；,]+)'
    
    match = re.search(pattern, full_text, re.IGNORECASE)
    if match:
        ingredients_text = match.group(1)
        ingredients = re.split(r'[,，、;；丶\s]\s*', ingredients_text)
        return [ing.strip() for ing in ingredients if ing.strip()]
    
    return extract_ingredients_fallback(full_text, lang)

def extract_ingredients_fallback(full_text, lang):
    """備用提取方法"""
    if lang == 'ch':
        item = ''.join(full_text)
        ingredients = item.split()
    return ingredients

@app.route("/callback", methods=['POST'])
def callback():
    """處理 LINE Webhook 請求"""
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    
    return 'OK'

@handler.add(MessageEvent, message=ImageMessage)
def handle_image_message(event):
    """處理圖片訊息"""
    # 取得圖片
    message_id = event.message.id
    message_content = line_bot_api.get_message_content(message_id)
    
    # 儲存圖片到臨時檔案
    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
        for chunk in message_content.iter_content():
            temp_file.write(chunk)
        temp_image_path = temp_file.name
    
    try:
        # 執行成分辨識
        ingredients = extract_ingredients_enhanced(temp_image_path, 'chinese_cht')
        
        # 格式化回應
        if ingredients:
            reply_text = '辨識出的成分：\n' + '、'.join(ingredients)
        else:
            reply_text = '無法辨識成分，請試試更清晰的圖片！'
    except Exception as e:
        reply_text = f'辨識失敗：{str(e)}'
    
    # 回傳結果
    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=reply_text)
    )
    
    # 刪除臨時檔案
    if os.path.exists(temp_image_path):
        os.remove(temp_image_path)

if __name__ == "__main__":
    app.run(debug=True, port=5000)